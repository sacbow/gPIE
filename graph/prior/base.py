from abc import ABC, abstractmethod
import numpy as np
from typing import Literal, Optional

from ..factor import Factor
from ..wave import Wave
from core.uncertain_array import UncertainArray


class Prior(Factor, ABC):
    """
    Abstract base class for prior factors in a Computational Factor Graph (CFG).

    A Prior represents the probabilistic origin of a Wave variable. It is a 
    leaf node that does not receive any incoming messages and only sends 
    an initial forward message based on its prior distribution.

    This base class automatically creates and connects a Wave node as its output,
    and returns it directly when instantiated (via `__new__`), enabling
    compact syntax like `self.X = MyPrior(...)`.

    Attributes:
        shape (tuple): Shape of the latent variable.
        dtype (np.dtype): Data type (typically complex).
        precision_mode (str or None): "scalar", "array", or None (inferred).
        label (str or None): Optional label for the output wave (for graph access).
        _init_rng (np.random.Generator or None): RNG used for initialization.
        output (Wave): The Wave instance generated by this Prior.
    """

    def __new__(cls, *args, **kwargs):
        """
        When instantiated, create the Prior and immediately return its output Wave.

        This enables:
             self.X = MyPrior(...)

        Returns:
            Wave: The output Wave node generated by this Prior.
        """

        instance = super().__new__(cls)
        instance.__init__(*args, **kwargs)
        return instance.output

    def __init__(
        self,
        shape,
        dtype=np.complex128,
        precision_mode: Optional[Literal["scalar", "array"]] = None,
        label = None
    ):
        """
        Initialize the Prior and its output Wave.

        Args:
            shape (tuple): Shape of the latent variable.
            dtype (np.dtype): Data type of the variable.
            precision_mode (str or None): "scalar", "array", or None.
            label (str or None): Optional label for identifying the output Wave in the graph.
        """
        super().__init__()
        self.shape = shape
        self.dtype = dtype
        self._init_rng = None
        if precision_mode is not None:
            self._set_precision_mode(precision_mode)

        # Create Wave (may propagate mode later)
        wave = Wave(shape, dtype=dtype, precision_mode=precision_mode, label = label)
        self.connect_output(wave)

    def set_precision_mode_backward(self):
        """
        If the output wave's mode is set externally (e.g., by children),
        adopt that mode into the prior factor.
        """
        if self.output.precision_mode is not None:
            self._set_precision_mode(self.output.precision_mode)

    def get_output_precision_mode(self) -> Optional[str]:
        """
        Return the preferred mode for the output wave.
        """
        return self.precision_mode

    def set_init_rng(self, rng):
        """
        Set the random number generator for generating the initial message.

        Args:
            rng (np.random.Generator): The RNG to use for sampling the prior.
        """
        self._init_rng = rng

    def forward(self):
        """
        Send a forward message to the output Wave node.

        If this is the first iteration, generate a random message using UncertainArray.random().
        Otherwise, update based on the incoming message (e.g., for structured priors).

        Raises:
            RuntimeError: If initial RNG is not set for message generation.
        """

        if self.output_message is None:
            if self._init_rng is None:
                raise RuntimeError("Initial RNG not configured for Prior.")
            msg = UncertainArray.random(self.shape, dtype=self.dtype, rng=self._init_rng)
        else:
            msg = self._compute_message(self.output_message)

        self.output.receive_message(self, msg)

    def backward(self):
        """
        No backward message from Prior.
        """
        pass

    @abstractmethod
    def _compute_message(self, incoming: UncertainArray) -> UncertainArray:
        pass
